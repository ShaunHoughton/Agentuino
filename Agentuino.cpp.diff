26c26,27
< #include "EthernetUdp.h"
---
> 
> #include <EthernetUdp.h>
33a35
>     _trapCommName = "public";
37a40
> 	_trapSize = strlen(_trapCommName);
45c48,49
< SNMP_API_STAT_CODES AgentuinoClass::begin(char *getCommName, char *setCommName, uint16_t port)
---
> SNMP_API_STAT_CODES AgentuinoClass::begin(char *getCommName,
>         char *setCommName, char *trapComName, uint16_t port)
49a54
> 	_trapSize = strlen(trapComName);
261c266,308
< SNMP_API_STAT_CODES AgentuinoClass::responsePdu(SNMP_PDU *pdu)
---
> SNMP_API_STAT_CODES AgentuinoClass::sendTrap(
>         SNMP_PDU *pdu, const uint8_t* manager)
> {
> 	byte i;
>     SNMP_VALUE value;
>     _dstType = pdu->type = SNMP_PDU_TRAP;
> 	_packetPos = 0;
>     uint16_t size = pdu->OID.size + 27
>         + 2 + pdu->trap_data_size;
>     writeHeaders(pdu, size);
>     _packet[_packetPos++] = (byte) size - 1;
>     _packet[_packetPos++] = (byte) SNMP_SYNTAX_OID;
> 	_packet[_packetPos++] = (byte) (pdu->OID.size);
> 	for(i = 0; i < pdu->OID.size; i++)
> 		_packet[_packetPos++] = pdu->OID.data[i];
>     _packet[_packetPos++] = (byte) SNMP_SYNTAX_IP_ADDRESS;
>     _packet[_packetPos++] = (byte) 4;
>     for(i = 0; i < 4; i++) _packet[_packetPos++] = pdu->address[i];
> 	_packet[_packetPos++] = (byte) SNMP_SYNTAX_INT;
>     value.encode(SNMP_SYNTAX_INT, pdu->trap_type);
> 	_packet[_packetPos++] = (byte) sizeof(pdu->trap_type);
> 	_packet[_packetPos++] = value.data[0];
> 	_packet[_packetPos++] = value.data[1];
> 	_packet[_packetPos++] = (byte) SNMP_SYNTAX_INT;
>     value.encode(SNMP_SYNTAX_INT, pdu->specific_trap);
> 	_packet[_packetPos++] = (byte) sizeof(pdu->specific_trap);
> 	_packet[_packetPos++] = value.data[0];
> 	_packet[_packetPos++] = value.data[1];
> 	_packet[_packetPos++] = (byte) SNMP_SYNTAX_TIME_TICKS;
> 	_packet[_packetPos++] = (byte) sizeof(pdu->time_ticks);
>     value.encode(SNMP_SYNTAX_TIME_TICKS, pdu->time_ticks);
> 	_packet[_packetPos++] = value.data[0];
> 	_packet[_packetPos++] = value.data[1];
> 	_packet[_packetPos++] = value.data[2];
> 	_packet[_packetPos++] = value.data[3];
>     _packet[_packetPos++] = (byte) SNMP_SYNTAX_SEQUENCE;
>     _packet[_packetPos++] = (byte) 4 + pdu->trap_data_size;
>     _packet[_packetPos++] = (byte) SNMP_SYNTAX_SEQUENCE;
>     _packet[_packetPos++] = (byte) 2 + pdu->trap_data_size;
>     pdu->trap_data_adder(_packet + _packetPos);
>     return writePacket(manager, 162);
> }
> void AgentuinoClass::writeHeaders(SNMP_PDU *pdu, uint16_t size)
268c315
< 	_packetSize = 25 + sizeof(pdu->requestId) + sizeof(pdu->error) + sizeof(pdu->errorIndex) + pdu->OID.size + pdu->VALUE.size;
---
> 	_packetSize = 8 + size;
275,276c322,327
< 		_packetSize += _getSize;
< 	}
---
>         if ( _dstType == SNMP_PDU_TRAP ) {
>             _packetSize += _trapSize;
>         } else {
>             _packetSize += _getSize;
>         }
>     }
294,297c345,355
< 		_packet[_packetPos++] = (byte)_getSize;	// length
< 		for ( i = 0; i < _getSize; i++ ) {
< 			_packet[_packetPos++] = (byte)_getCommName[i];
< 		}
---
>         if ( _dstType == SNMP_PDU_TRAP ) {
>             _packet[_packetPos++] = (byte)_trapSize;	// length
>             for ( i = 0; i < _getSize; i++ ) {
>                 _packet[_packetPos++] = (byte)_trapCommName[i];
>             }
>         } else {
>             _packet[_packetPos++] = (byte)_getSize;	// length
>             for ( i = 0; i < _getSize; i++ ) {
>                 _packet[_packetPos++] = (byte)_getCommName[i];
>             }
>         }
301a360,368
> }
> SNMP_API_STAT_CODES AgentuinoClass::responsePdu(SNMP_PDU *pdu)
> {
> 	int32_u u;
> 	byte i;
>     this->writeHeaders(pdu, 17 +
>             sizeof(pdu->requestId) + sizeof(pdu->error)
>             + sizeof(pdu->errorIndex) + pdu->OID.size
>             + pdu->VALUE.size);
352,353c419,424
< 	//
< 	Udp.beginPacket(Udp.remoteIP(), Udp.remotePort());
---
>     return writePacket(Udp.remoteIP(), Udp.remotePort());
> }
> SNMP_API_STAT_CODES AgentuinoClass::writePacket(
>         IPAddress address, uint16_t port)
> {
> 	Udp.beginPacket(address, port);
356,357d426
< //	Udp.write(_packet, _packetSize, _dstIp, _dstPort);
< 	//
